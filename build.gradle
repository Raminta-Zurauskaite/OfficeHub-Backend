plugins {
	id 'org.springframework.boot' version '2.6.6'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
	webRunner

	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	//implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-rest'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springdoc:springdoc-openapi-ui:1.5.4'
	//implementation 'org.flywaydb:flyway-core'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	runtimeOnly 'org.postgresql:postgresql'
	webRunner 'com.heroku:webapp-runner:9.0.52.1'
	//webRunner 'com.github.jsimone:webapp-runner:9.0.27.1'
	//providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('test') {
	useJUnitPlatform()
}

/*task stage() {
	dependsOn clean, war
}

war.mustRunAfter clean

task copyToLib(type: Copy) {
	println 'TestA'
	into "$buildDir/server"
	from(configurations.webRunner) {
		include "webapp-runner*"
	}
}

task showMeCache doLast() {
	println 'testb'
	configurations.compileClasspath.each { println it }
}

task test1(){
	println 'testc'
}

test1.dependsOn(showMeCache)

stage.dependsOn(copyToLib)*/
